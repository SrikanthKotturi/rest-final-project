var searchIndex = new Map(JSON.parse('[\
["rust_data_pipeline",{"doc":"This is the main module that drives the entire data …","t":"CHCCCHHHHHHHHHH","n":["ingestion","main","seed","storage","transformation","ingest_csv","retry_ingest","run_db_setup","create_connection_pool","get_first_5_rows","store_data","clean_data","normalize_data","transform_data","validate_data"],"q":[[0,"rust_data_pipeline"],[5,"rust_data_pipeline::ingestion"],[7,"rust_data_pipeline::seed"],[8,"rust_data_pipeline::storage"],[11,"rust_data_pipeline::transformation"],[15,"anyhow"],[16,"polars_core::frame"],[17,"sqlx_postgres"]],"d":["This module handles the ingestion of CSV data files into …","The main entry point for the data pipeline application.","This module handles the initial setup of the database.","This module handles the storage of data into a PostgreSQL …","This module handles the transformation of data within …","Ingests a CSV file and returns a DataFrame.","Retries the ingestion of a CSV file up to a specified …","Sets up the database by creating the connection pool and …","Creates a connection pool to the PostgreSQL database.","Fetches and prints the first 5 rows from the patients …","Stores data from a DataFrame into the PostgreSQL database.","Cleans the data by converting specified columns to …","Normalizes the data by filtering, dropping nulls, and …","Transforms the input DataFrame by cleaning, normalizing, …","Validates the data by ensuring all dates in the “Date of …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"`{{}{{d{b}}}}```{f{{d{h}}}}{{fj}{{d{h}}}}2{{}{{d{l}}}}{l{{d{b}}}}{{lh}{{d{b}}}}{h{{d{h}}}}000","c":[],"p":[[1,"unit"],[8,"Result",15],[1,"str"],[5,"DataFrame",16],[1,"usize"],[8,"PgPool",17]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
